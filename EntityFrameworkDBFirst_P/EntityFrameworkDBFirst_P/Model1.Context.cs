//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace EntityFrameworkDBFirst_P
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    using EntityFrameworkDBFirst_P.Models;
    using System.Data.SqlClient;
    public partial class DBFirstDB_ProcContext : DbContext
    {
        public DBFirstDB_ProcContext()
            : base("name=DBFirstDB_ProcContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Customer> Customers { get; set; }
    
        public virtual ObjectResult<Customers_SearchCustomers_Result> Customers_SearchCustomers(Customers_SearchCustomers_Result cs)
        {
            var nameParameter = cs.Name != null ?
                new ObjectParameter("Name", cs.Name) :
                new ObjectParameter("Name", typeof(string));
    
            var idParameter = cs.Id != null ?
                new ObjectParameter("Id", cs.Id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Customers_SearchCustomers_Result>("Customers_SearchCustomers", nameParameter, idParameter);
        }

        public virtual int AddCusDetails(CustomerViewModel c)
        {
            var nameParameter = c.Name != null ?
                new ObjectParameter("Name", c.Name) :
                new ObjectParameter("Name", typeof(string));

            var cityParameter = c.City != null ?
                new ObjectParameter("City", c.City) :
                new ObjectParameter("City", typeof(string));

            var countryParameter = c.Country != null ?
                new ObjectParameter("Country", c.Country) :
                new ObjectParameter("Country", typeof(string));

            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCusDetails", nameParameter, cityParameter, countryParameter);
        }





        public virtual ObjectResult<GetCustomer_Result> GetCustomer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCustomer_Result>("GetCustomer");
        }
    
        public virtual int DeleteCusById(Nullable<int> custId)
        {
            var custIdParameter = custId.HasValue ?
                new ObjectParameter("custId", custId) :
                new ObjectParameter("custId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCusById", custIdParameter);
        }
    
        public virtual int UpdateCustomer(Customer c)
        {
            var idParameter = c.Id != null ?
                new ObjectParameter("Id", c.Id) :
                new ObjectParameter("Id", typeof(int));
    
            var nameParameter = c.Name != null ?
                new ObjectParameter("Name", c.Name) :
                new ObjectParameter("Name", typeof(string));
    
            var cityParameter = c.City != null ?
                new ObjectParameter("City", c.City) :
                new ObjectParameter("City", typeof(string));
    
            var countryParameter = c.Country != null ?
                new ObjectParameter("Country", c.Country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateCustomer", idParameter, nameParameter, cityParameter, countryParameter);
        }



        //public virtual ObjectResult<SearchCusById1_Result> SearchCusById1(Nullable<int> cId)
        //{
        //    var cIdParameter = cId.HasValue ?
        //        new ObjectParameter("cId", cId) :
        //        new ObjectParameter("cId", typeof(int));

        //    return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SearchCusById1_Result>("SearchCusById1", cIdParameter);
        //  }

        public Customer SearchCustomer(int Id)
        {
            SqlParameter custId = new SqlParameter("@cId ", Id);// this is for giving value to stored procedure parameter and !! @Name should be same to the input parameter of procedure 
            var result = this.Customers.SqlQuery("exec SearchCusById @cId ", custId).FirstOrDefault();
            return result;
        }
    }
}
